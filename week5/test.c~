#include <stdio.h>
#include <stdlib.h>
# include <math.h>

int main()
{
	int i,j,k,n,indeg[10],flag[10],count=0;
	n=6;
	
	//printf("Enter the adjacency matrix:\n");
	int a[6][6]={{0,1,1,1,0,0},{0,0,0,0,1,1},{0,1,0,1,1,0},{0,0,0,0,1,1},{0,0,0,0,0,1},{0,0,0,0,0,0}};
		for(i=0;i<n;i++)
		{
			indeg[i]=0;
			flag[i]=0;
		}
		for(i=0;i<n;i++)
			for(j=0;j<n;j++)
		indeg[i]=indeg[i]+a[j][i];
			printf("The topological order is:\n");
			while(count<n)
			{
				for(k=0;k<n;k++)
				{
					if((indeg[k]==0) && (flag[k]==0))
					{
						printf("%d",(k+1));
					     flag [k]=1;
					}

					for(i=0;i<n;i++)
					{
						if(a[i][k]==1)
							indeg[k]--;
					}

				}
				count++;
			}
			return 0;

}


int topological_sort(int N){

       int T = []
       int  visited = []
        int in_degree = []
       for(i=0;i<n;i++)
       {
                in_degree[i] = visited[i] = 0;
            }

      for(i=0;i<n;i++)
             for(j=0;j<n;j++)
                    {    if (adj[i][j]==0)
                                in_degree[j] = in_degree[j] + 1;
                            }

       for(i=0;i<n;i++)
       {
                if (in_degree[i] == 0)
                        enqueue(Queue, i);
                        visited[i] = 1;
                    }

        while Queue is not Empty
                vertex = get_front(Queue)
                dequeue(Queue)
                T.append(vertex)
                for j = 0 to N
                        if adj[vertex][j] is TRUE and visited[j] is FALSE
                                in_degree[j] = in_degree[j] - 1
                                if in_degree[j] is 0
                                        enqueue(Queue, j)
                                        visited[j] = TRUE
        return T;
    }